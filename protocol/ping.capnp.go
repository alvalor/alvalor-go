// Code generated by capnpc-go.

package protocol

// AUTO GENERATED - DO NOT EDIT

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Ping struct{ capnp.Struct }

// Ping_TypeID is the unique identifier for the type Ping.
const Ping_TypeID = 0xa4c448def3da1fe5

func NewPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Ping{st}, err
}

func NewRootPing(s *capnp.Segment) (Ping, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Ping{st}, err
}

func ReadRootPing(msg *capnp.Message) (Ping, error) {
	root, err := msg.RootPtr()
	return Ping{root.Struct()}, err
}

func (s Ping) String() string {
	str, _ := text.Marshal(0xa4c448def3da1fe5, s.Struct)
	return str
}

func (s Ping) Nonce() uint32 {
	return s.Struct.Uint32(0)
}

func (s Ping) SetNonce(v uint32) {
	s.Struct.SetUint32(0, v)
}

// Ping_List is a list of Ping.
type Ping_List struct{ capnp.List }

// NewPing creates a new list of Ping.
func NewPing_List(s *capnp.Segment, sz int32) (Ping_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Ping_List{l}, err
}

func (s Ping_List) At(i int) Ping { return Ping{s.List.Struct(i)} }

func (s Ping_List) Set(i int, v Ping) error { return s.List.SetStruct(i, v.Struct) }

// Ping_Promise is a wrapper for a Ping promised by a client call.
type Ping_Promise struct{ *capnp.Pipeline }

func (p Ping_Promise) Struct() (Ping, error) {
	s, err := p.Pipeline.Struct()
	return Ping{s}, err
}

const schema_c4411f23835fd9b0 = "x\xda\x12X\xe1\xc0d\xc8Z\xcf\xc2\xc0\x10h\xc2\xca" +
	"\xf6\xff\xa9\xfc\xad\xcf\xf7<\x8e,a\x08\x14ad\xfc" +
	"\xbf\xe1f|\xb3\xb2\xbc\xe3\x11\x06\x16v\x06\x06aU" +
	"\xa6S\xc2\x86L \x96.\x93=C\xeb\xff\x82\xa2\xfc" +
	"\x92\xfc\xe4\xfc\x1c&\xfd\x82\xcc\xbct\xbd\xe4\xc4\x82\xbc" +
	"\x02\xab\x00 \x93\x81!\x80\x911\x90\x85\x19h(\x0b" +
	"#\x03\x83 \xaf\x11\xd0t\x0ef\xc6@\x11&F\xf9" +
	"\xbc\xfc\xbc\xe4TF\x0e\x06& f\x04\x04\x00\x00\xff" +
	"\xff\xf2\xc3\x1e\x83"

func init() {
	schemas.Register(schema_c4411f23835fd9b0,
		0xa4c448def3da1fe5)
}
