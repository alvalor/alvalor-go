// Code generated by capnpc-go. DO NOT EDIT.

package codec

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Mempool struct{ capnp.Struct }

// Mempool_TypeID is the unique identifier for the type Mempool.
const Mempool_TypeID = 0xf0380ead552fac15

func NewMempool(s *capnp.Segment) (Mempool, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mempool{st}, err
}

func NewRootMempool(s *capnp.Segment) (Mempool, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Mempool{st}, err
}

func ReadRootMempool(msg *capnp.Message) (Mempool, error) {
	root, err := msg.RootPtr()
	return Mempool{root.Struct()}, err
}

func (s Mempool) String() string {
	str, _ := text.Marshal(0xf0380ead552fac15, s.Struct)
	return str
}

func (s Mempool) Bloom() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Mempool) HasBloom() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Mempool) SetBloom(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Mempool_List is a list of Mempool.
type Mempool_List struct{ capnp.List }

// NewMempool creates a new list of Mempool.
func NewMempool_List(s *capnp.Segment, sz int32) (Mempool_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Mempool_List{l}, err
}

func (s Mempool_List) At(i int) Mempool { return Mempool{s.List.Struct(i)} }

func (s Mempool_List) Set(i int, v Mempool) error { return s.List.SetStruct(i, v.Struct) }

func (s Mempool_List) String() string {
	str, _ := text.MarshalList(0xf0380ead552fac15, s.List)
	return str
}

// Mempool_Promise is a wrapper for a Mempool promised by a client call.
type Mempool_Promise struct{ *capnp.Pipeline }

func (p Mempool_Promise) Struct() (Mempool, error) {
	s, err := p.Pipeline.Struct()
	return Mempool{s}, err
}

const schema_d644fe17b956a80f = "x\xda2\xd0ft`2d\x9d\xcf\xc1\xc0\x10\x98\xc2" +
	"\xca\xf6_t\x8d~\xe8Z>\x8b\x0f\x0c\x82|\x8c\xff" +
	"\xf9W\x84\xed\x14\xff\xe7r\x8d\x81\x95\x91\x9d\x81A\xd8" +
	"\x94e\x93\xb0-\x0b\x88e\xc9b\xcf\xf0\x9f\x81\xf3\x7f" +
	"njnA~~\x8e\x1ecrbA^\x81\x95o" +
	"\xaa<\x98\x1f\xc0\xc8\x18\xc8\xc2\xcc\xc2\xc0\xc0\xc2\xc8\xc0" +
	" \xc8k\xc4\xc0\x10\xc8\xc1\xcc\x18(\xc2\xc4(\x9f\x94" +
	"\x93\x9f\x9f\xcb\xc8\xcb\xc0\xc4\xc8\xcb\xc0\x08\x08\x00\x00\xff" +
	"\xff\xb5\xc7\x1b\xfe"

func init() {
	schemas.Register(schema_d644fe17b956a80f,
		0xf0380ead552fac15)
}
