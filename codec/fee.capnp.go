// Code generated by capnpc-go. DO NOT EDIT.

package codec

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Fee struct{ capnp.Struct }

// Fee_TypeID is the unique identifier for the type Fee.
const Fee_TypeID = 0xcda91da91de91079

func NewFee(s *capnp.Segment) (Fee, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Fee{st}, err
}

func NewRootFee(s *capnp.Segment) (Fee, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Fee{st}, err
}

func ReadRootFee(msg *capnp.Message) (Fee, error) {
	root, err := msg.RootPtr()
	return Fee{root.Struct()}, err
}

func (s Fee) String() string {
	str, _ := text.Marshal(0xcda91da91de91079, s.Struct)
	return str
}

func (s Fee) From() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Fee) HasFrom() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Fee) SetFrom(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Fee) Amount() uint64 {
	return s.Struct.Uint64(0)
}

func (s Fee) SetAmount(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Fee_List is a list of Fee.
type Fee_List struct{ capnp.List }

// NewFee creates a new list of Fee.
func NewFee_List(s *capnp.Segment, sz int32) (Fee_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Fee_List{l}, err
}

func (s Fee_List) At(i int) Fee { return Fee{s.List.Struct(i)} }

func (s Fee_List) Set(i int, v Fee) error { return s.List.SetStruct(i, v.Struct) }

func (s Fee_List) String() string {
	str, _ := text.MarshalList(0xcda91da91de91079, s.List)
	return str
}

// Fee_Promise is a wrapper for a Fee promised by a client call.
type Fee_Promise struct{ *capnp.Pipeline }

func (p Fee_Promise) Struct() (Fee, error) {
	s, err := p.Pipeline.Struct()
	return Fee{s}, err
}

const schema_909e243e4566f5a3 = "x\xda\x12\xf8\xee\xc0d\xc8\xda\xcf\xc6\xc0\x10\xe8\xc3\xca" +
	"\xf6\xbfR\xe0\xa5\xecJ\xd9\x95g\x19\x02\xb9\x18\x19\xff" +
	"/\xfe\x9a\xe6j\xa72o\x02\x03+#;\x03\x83\xb0" +
	".s\x91\xb0!3\x84U\xcep\xfc\x7fZj\xaa^" +
	"rbA\x1e\x83|\x81\x95[jj\x00#c \x07" +
	"3\x0b\x03\x03\x0b#\x03\x83\xa0\xa6\x16\x03C\xa0\x0a3" +
	"c\xa0\x01\x13##\xa3\x08#HL\xd7\x8a\x81!P" +
	"\x83\x991\xd0\x84\x89\x91?\xad(?\x97\x91\x97\x81\x89" +
	"\x91\x97\x81\xd1>17\xbf4\xaf\x84\x91\x93\x81\x89\x91" +
	"\x93\x81\x11\x10\x00\x00\xff\xffOC\x1d\x98"

func init() {
	schemas.Register(schema_909e243e4566f5a3,
		0xcda91da91de91079)
}
