// Code generated by capnpc-go. DO NOT EDIT.

package codec

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Fee struct{ capnp.Struct }

// Fee_TypeID is the unique identifier for the type Fee.
const Fee_TypeID = 0xcda91da91de91079

func NewFee(s *capnp.Segment) (Fee, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Fee{st}, err
}

func NewRootFee(s *capnp.Segment) (Fee, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Fee{st}, err
}

func ReadRootFee(msg *capnp.Message) (Fee, error) {
	root, err := msg.RootPtr()
	return Fee{root.Struct()}, err
}

func (s Fee) String() string {
	str, _ := text.Marshal(0xcda91da91de91079, s.Struct)
	return str
}

func (s Fee) From() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Fee) HasFrom() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Fee) SetFrom(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Fee) Amount() uint64 {
	return s.Struct.Uint64(0)
}

func (s Fee) SetAmount(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Fee_List is a list of Fee.
type Fee_List struct{ capnp.List }

// NewFee creates a new list of Fee.
func NewFee_List(s *capnp.Segment, sz int32) (Fee_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Fee_List{l}, err
}

func (s Fee_List) At(i int) Fee { return Fee{s.List.Struct(i)} }

func (s Fee_List) Set(i int, v Fee) error { return s.List.SetStruct(i, v.Struct) }

func (s Fee_List) String() string {
	str, _ := text.MarshalList(0xcda91da91de91079, s.List)
	return str
}

// Fee_Promise is a wrapper for a Fee promised by a client call.
type Fee_Promise struct{ *capnp.Pipeline }

func (p Fee_Promise) Struct() (Fee, error) {
	s, err := p.Pipeline.Struct()
	return Fee{s}, err
}

const schema_909e243e4566f5a3 = "x\xda$\xc8?\x0e\xc1P\x00\x06\xf0\xef{}\xa5\x95" +
	"4H\xad\x8d\xa5\x03\x12R\x09C;`a\xf6\x8e\xd0" +
	"\xf0\xba\xf5O\x1a\"n\xe1\x04\x0c\xa6\x1e\xc6A\x1c\xc0" +
	"\xfcDl\xbf\xfc\xa2\x98\x1b1\xb7\x1f\x0e\xa0\x8ev\xcb" +
	"\\{\xef\xa0\x09\x9a\x17T\x874\xcfO\xb6]\x85\xf7" +
	"\x1bl\xb6\x01\x7f)k?\x96\x7f]`\xe0\x9aL\xeb" +
	"\xd9!\xad\x0a\x0c\xabd\xa7\xf5\x9eT\x8e%\x01I\xa0" +
	"?\x9e\x00*\xb4\xa8\"Ar\xc0\xdfM\x13@\x8d," +
	"\xaa\x85`7\xab\xcb\x9c\x1e\x04=p\x9d\xe6\xe5\xb98" +
	"\xd1\x85\xa0\x0b~\x03\x00\x00\xff\xffL\x00\x1d\x81"

func init() {
	schemas.Register(schema_909e243e4566f5a3,
		0xcda91da91de91079)
}
