// Code generated by capnpc-go. DO NOT EDIT.

package codec

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Z struct{ capnp.Struct }
type Z_Which uint16

const (
	Z_Which_ping        Z_Which = 0
	Z_Which_pong        Z_Which = 1
	Z_Which_discover    Z_Which = 2
	Z_Which_peers       Z_Which = 3
	Z_Which_text        Z_Which = 4
	Z_Which_data        Z_Which = 5
	Z_Which_transaction Z_Which = 6
)

func (w Z_Which) String() string {
	const s = "pingpongdiscoverpeerstextdatatransaction"
	switch w {
	case Z_Which_ping:
		return s[0:4]
	case Z_Which_pong:
		return s[4:8]
	case Z_Which_discover:
		return s[8:16]
	case Z_Which_peers:
		return s[16:21]
	case Z_Which_text:
		return s[21:25]
	case Z_Which_data:
		return s[25:29]
	case Z_Which_transaction:
		return s[29:40]

	}
	return "Z_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Z_TypeID is the unique identifier for the type Z.
const Z_TypeID = 0xb46d352733d41eba

func NewZ(s *capnp.Segment) (Z, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Z{st}, err
}

func NewRootZ(s *capnp.Segment) (Z, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Z{st}, err
}

func ReadRootZ(msg *capnp.Message) (Z, error) {
	root, err := msg.RootPtr()
	return Z{root.Struct()}, err
}

func (s Z) String() string {
	str, _ := text.Marshal(0xb46d352733d41eba, s.Struct)
	return str
}

func (s Z) Which() Z_Which {
	return Z_Which(s.Struct.Uint16(0))
}
func (s Z) Ping() (Ping, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != ping")
	}
	p, err := s.Struct.Ptr(0)
	return Ping{Struct: p.Struct()}, err
}

func (s Z) HasPing() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetPing(v Ping) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPing sets the ping field to a newly
// allocated Ping struct, preferring placement in s's segment.
func (s Z) NewPing() (Ping, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewPing(s.Struct.Segment())
	if err != nil {
		return Ping{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Pong() (Pong, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != pong")
	}
	p, err := s.Struct.Ptr(0)
	return Pong{Struct: p.Struct()}, err
}

func (s Z) HasPong() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetPong(v Pong) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPong sets the pong field to a newly
// allocated Pong struct, preferring placement in s's segment.
func (s Z) NewPong() (Pong, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewPong(s.Struct.Segment())
	if err != nil {
		return Pong{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Discover() (Discover, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != discover")
	}
	p, err := s.Struct.Ptr(0)
	return Discover{Struct: p.Struct()}, err
}

func (s Z) HasDiscover() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetDiscover(v Discover) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDiscover sets the discover field to a newly
// allocated Discover struct, preferring placement in s's segment.
func (s Z) NewDiscover() (Discover, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewDiscover(s.Struct.Segment())
	if err != nil {
		return Discover{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Peers() (Peers, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != peers")
	}
	p, err := s.Struct.Ptr(0)
	return Peers{Struct: p.Struct()}, err
}

func (s Z) HasPeers() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetPeers(v Peers) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPeers sets the peers field to a newly
// allocated Peers struct, preferring placement in s's segment.
func (s Z) NewPeers() (Peers, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewPeers(s.Struct.Segment())
	if err != nil {
		return Peers{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Text() (string, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != text")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Z) HasText() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) TextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Z) SetText(v string) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetText(0, v)
}

func (s Z) Data() ([]byte, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != data")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Z) HasData() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetData(v []byte) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetData(0, v)
}

func (s Z) Transaction() (Transaction, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != transaction")
	}
	p, err := s.Struct.Ptr(0)
	return Transaction{Struct: p.Struct()}, err
}

func (s Z) HasTransaction() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetTransaction(v Transaction) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTransaction sets the transaction field to a newly
// allocated Transaction struct, preferring placement in s's segment.
func (s Z) NewTransaction() (Transaction, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewTransaction(s.Struct.Segment())
	if err != nil {
		return Transaction{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Z_List is a list of Z.
type Z_List struct{ capnp.List }

// NewZ creates a new list of Z.
func NewZ_List(s *capnp.Segment, sz int32) (Z_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Z_List{l}, err
}

func (s Z_List) At(i int) Z { return Z{s.List.Struct(i)} }

func (s Z_List) Set(i int, v Z) error { return s.List.SetStruct(i, v.Struct) }

func (s Z_List) String() string {
	str, _ := text.MarshalList(0xb46d352733d41eba, s.List)
	return str
}

// Z_Promise is a wrapper for a Z promised by a client call.
type Z_Promise struct{ *capnp.Pipeline }

func (p Z_Promise) Struct() (Z, error) {
	s, err := p.Pipeline.Struct()
	return Z{s}, err
}

func (p Z_Promise) Ping() Ping_Promise {
	return Ping_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Pong() Pong_Promise {
	return Pong_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Discover() Discover_Promise {
	return Discover_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Peers() Peers_Promise {
	return Peers_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Transaction() Transaction_Promise {
	return Transaction_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_904d4f3f728c7f04 = "x\xda4\xcc\xbb\x8b\x13Q\x1c\xc5\xf1s\xee\x9d\x87E" +
	".\x99a\xa7\x12uKQ\x88\xb8\xbbha\xe3\x16\x0a" +
	"\"\xcaz\xb7\xd4B\xc6\xec )\x9c\x0c\x93A\x82\x8d" +
	"}\x10\xe2\x7f\xa0\x85X[$\x82\x92@\x8a\x04#(" +
	"$\x90F\x11\xbb\x80E:+\xe3\xe3'#\xb1\xfd\x1c" +
	"\xce\xf7\xfc\x15\xee\xab\x1d\xb7\xeb\x01\xf6\x86\xeb\xc9\xdbS" +
	"\x8b\xbd\xd3\x17\x1e\xf4`\x8f\x91\xe2<~\x92_>\xb8" +
	"\xf9\x14W\xe9\xfb\xc0VM\x1fn\xedh\x1f\xd8\xab\xe9" +
	".\xf1N\x1e\x9d\xab\xc7Y\x9a]\x02o\xdf\"\xed\x09" +
	"\xedTD\x1c\x02a\xff,`_i\xda\x81\xa2\xe1\x1f" +
	"\x89X\xea\x9bR{\x9av\xa4h\xd4o\x89\xa8\x80p" +
	"x\x1d\xb0\x03M;U4\xfa\x97D\xd4@8\xd9\x05" +
	"\xecH\xd3~P4\xceO\x89\xe8\x00\xe1\xfb\xb20\xd6" +
	"\xb43E\xe3\xae%\xa2\x0b\x84\x1fK\x9dj\xda\x85\xa2" +
	"\xf1~HD\x0f\x08\xe7\xf7\x00;\xd3\xb4_\x14\xabY" +
	"#\xbd\xcf@\x96\xdb\x9f\xbf\x7f\xbd6~\x01\x90\x01X" +
	"\xcd\x9a\xffXj\xcf\x0fd\xb7\xbf\xdc\xb0\x1c5Z\xf5" +
	"\xe6\xc3$\x07\xc0@\xda\xaf_^\xfc\xb6\xbf\xeal\xd6" +
	"\xed,I\xf2\x16\x039~xgrr\xdd\x19\xfe\x8f" +
	"\x15I\xbb`\x05\x8a\x15\xb0z\x14\x171\x0d\x14\x0d(" +
	"E\x1e\xa7\xad\xb8^\xc0o4S\x06rW\x9f\x99{" +
	"\x9f\x9e\xad6\xcf\xbf\x01\x00\x00\xff\xff\x9b\xabhA"

func init() {
	schemas.Register(schema_904d4f3f728c7f04,
		0xb46d352733d41eba)
}
