// Code generated by capnpc-go.

package codec

// AUTO GENERATED - DO NOT EDIT

import (
	strconv "strconv"

	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Z struct{ capnp.Struct }
type Z_Which uint16

const (
	Z_Which_ping     Z_Which = 0
	Z_Which_pong     Z_Which = 1
	Z_Which_discover Z_Which = 2
	Z_Which_peers    Z_Which = 3
	Z_Which_text     Z_Which = 4
	Z_Which_data     Z_Which = 5
)

func (w Z_Which) String() string {
	const s = "pingpongdiscoverpeerstextdata"
	switch w {
	case Z_Which_ping:
		return s[0:4]
	case Z_Which_pong:
		return s[4:8]
	case Z_Which_discover:
		return s[8:16]
	case Z_Which_peers:
		return s[16:21]
	case Z_Which_text:
		return s[21:25]
	case Z_Which_data:
		return s[25:29]

	}
	return "Z_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Z_TypeID is the unique identifier for the type Z.
const Z_TypeID = 0xb46d352733d41eba

func NewZ(s *capnp.Segment) (Z, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Z{st}, err
}

func NewRootZ(s *capnp.Segment) (Z, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Z{st}, err
}

func ReadRootZ(msg *capnp.Message) (Z, error) {
	root, err := msg.RootPtr()
	return Z{root.Struct()}, err
}

func (s Z) String() string {
	str, _ := text.Marshal(0xb46d352733d41eba, s.Struct)
	return str
}

func (s Z) Which() Z_Which {
	return Z_Which(s.Struct.Uint16(0))
}
func (s Z) Ping() (Ping, error) {
	p, err := s.Struct.Ptr(0)
	return Ping{Struct: p.Struct()}, err
}

func (s Z) HasPing() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetPing(v Ping) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPing sets the ping field to a newly
// allocated Ping struct, preferring placement in s's segment.
func (s Z) NewPing() (Ping, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewPing(s.Struct.Segment())
	if err != nil {
		return Ping{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Pong() (Pong, error) {
	p, err := s.Struct.Ptr(0)
	return Pong{Struct: p.Struct()}, err
}

func (s Z) HasPong() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetPong(v Pong) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPong sets the pong field to a newly
// allocated Pong struct, preferring placement in s's segment.
func (s Z) NewPong() (Pong, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewPong(s.Struct.Segment())
	if err != nil {
		return Pong{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Discover() (Discover, error) {
	p, err := s.Struct.Ptr(0)
	return Discover{Struct: p.Struct()}, err
}

func (s Z) HasDiscover() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetDiscover(v Discover) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDiscover sets the discover field to a newly
// allocated Discover struct, preferring placement in s's segment.
func (s Z) NewDiscover() (Discover, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewDiscover(s.Struct.Segment())
	if err != nil {
		return Discover{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Peers() (Peers, error) {
	p, err := s.Struct.Ptr(0)
	return Peers{Struct: p.Struct()}, err
}

func (s Z) HasPeers() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetPeers(v Peers) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPeers sets the peers field to a newly
// allocated Peers struct, preferring placement in s's segment.
func (s Z) NewPeers() (Peers, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewPeers(s.Struct.Segment())
	if err != nil {
		return Peers{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Text() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Z) HasText() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) TextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Z) SetText(v string) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetText(0, v)
}

func (s Z) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Z) HasData() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetData(v []byte) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetData(0, v)
}

// Z_List is a list of Z.
type Z_List struct{ capnp.List }

// NewZ creates a new list of Z.
func NewZ_List(s *capnp.Segment, sz int32) (Z_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Z_List{l}, err
}

func (s Z_List) At(i int) Z { return Z{s.List.Struct(i)} }

func (s Z_List) Set(i int, v Z) error { return s.List.SetStruct(i, v.Struct) }

// Z_Promise is a wrapper for a Z promised by a client call.
type Z_Promise struct{ *capnp.Pipeline }

func (p Z_Promise) Struct() (Z, error) {
	s, err := p.Pipeline.Struct()
	return Z{s}, err
}

func (p Z_Promise) Ping() Ping_Promise {
	return Ping_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Pong() Pong_Promise {
	return Pong_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Discover() Discover_Promise {
	return Discover_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Peers() Peers_Promise {
	return Peers_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_904d4f3f728c7f04 = "x\xda\x12\xf8\xec\xc0d\xc8Z\xcf\xc2\xc0\x10h\xc2\xca" +
	"\xf6\x7f\x97\xdc\x15cu\xd3\xdc-\x0c\x81\x82\x8c\x8c\xff" +
	"Y\xea{\x8a\xec\xfd}'0\xb82\xb2\xb310\x08" +
	"\xab2\xcd\x12\xd6ebg`0\xd6d\x0agdh" +
	"\xfd_P\x94_\x92\x9f\x9c\x9f\xc3\xa8_\xa5\x97\x9cX" +
	"\x90W\xc0l\x15\x15\xc0\xc8\x18(\xc1\xcc\xc2\xf3\xff?" +
	"\x0b#\x03\x83\xe0L-\xa0\xd1S\x98\x19\x03\x1701" +
	"\xf22\xfe\xfb/\xc2\x08\x12\x9d\x0b\x12\x9d\x01\x14]\x02" +
	"\x14e\xfa\x0b\x14e\x02\x8a.\xf4\x02\x8a.\x00\x8a\xae" +
	"\x01\x8a2\xff\x01\x8a2\x03EW\x1a\x01E\x97\x00E" +
	"7\x00EY~\x03E\x81\xae\x15\\\x0b2a\x05P" +
	"t\x0bP\x94\xf5\x17P\x94\x15(\xba\x11$\xba\x06(" +
	"\xba\x83\x89\x91\xbf 3/\x9dQ\xe0\xffS\xf9[\x9f" +
	"\xefy\x1cY\xc2\xc0\xc0\xc8(\xc0\x00\x14\xce\x07\x0b\xff" +
	"\xd7]\xe0\xff\xdfh\xebS\xa8\xf0\xff\x94\xcc\xe2\xe4\xfc" +
	"\xb2\xd4\"\x06\xa0\x80\xc0\xff\x8am\xcb\xcc^8\xbc\xe9" +
	"\x82\xca\xca\x17\xa4\xa6\x16\x15\x03\xc5\xa5\x82\xa2\x8f\xca\xfe" +
	"\xea\xda\x0b3\xac$\xb5\xa2\x84\x91\x87\x81\x09\x88\x19\xf9" +
	"S\x12K\x12\x19y\x81\x1c^\x06F@\x00\x00\x00\xff" +
	"\xff\xea\xf3Y\xbc"

func init() {
	schemas.Register(schema_904d4f3f728c7f04,
		0xb46d352733d41eba)
}
