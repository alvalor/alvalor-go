// Code generated by capnpc-go. DO NOT EDIT.

package codec

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Z struct{ capnp.Struct }
type Z_Which uint16

const (
	Z_Which_ping        Z_Which = 0
	Z_Which_pong        Z_Which = 1
	Z_Which_discover    Z_Which = 2
	Z_Which_peers       Z_Which = 3
	Z_Which_transaction Z_Which = 4
	Z_Which_mempool     Z_Which = 5
	Z_Which_inventory   Z_Which = 6
	Z_Which_request     Z_Which = 7
)

func (w Z_Which) String() string {
	const s = "pingpongdiscoverpeerstransactionmempoolinventoryrequest"
	switch w {
	case Z_Which_ping:
		return s[0:4]
	case Z_Which_pong:
		return s[4:8]
	case Z_Which_discover:
		return s[8:16]
	case Z_Which_peers:
		return s[16:21]
	case Z_Which_transaction:
		return s[21:32]
	case Z_Which_mempool:
		return s[32:39]
	case Z_Which_inventory:
		return s[39:48]
	case Z_Which_request:
		return s[48:55]

	}
	return "Z_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Z_TypeID is the unique identifier for the type Z.
const Z_TypeID = 0xb46d352733d41eba

func NewZ(s *capnp.Segment) (Z, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Z{st}, err
}

func NewRootZ(s *capnp.Segment) (Z, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Z{st}, err
}

func ReadRootZ(msg *capnp.Message) (Z, error) {
	root, err := msg.RootPtr()
	return Z{root.Struct()}, err
}

func (s Z) String() string {
	str, _ := text.Marshal(0xb46d352733d41eba, s.Struct)
	return str
}

func (s Z) Which() Z_Which {
	return Z_Which(s.Struct.Uint16(0))
}
func (s Z) Ping() (Ping, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != ping")
	}
	p, err := s.Struct.Ptr(0)
	return Ping{Struct: p.Struct()}, err
}

func (s Z) HasPing() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetPing(v Ping) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPing sets the ping field to a newly
// allocated Ping struct, preferring placement in s's segment.
func (s Z) NewPing() (Ping, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewPing(s.Struct.Segment())
	if err != nil {
		return Ping{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Pong() (Pong, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != pong")
	}
	p, err := s.Struct.Ptr(0)
	return Pong{Struct: p.Struct()}, err
}

func (s Z) HasPong() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetPong(v Pong) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPong sets the pong field to a newly
// allocated Pong struct, preferring placement in s's segment.
func (s Z) NewPong() (Pong, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewPong(s.Struct.Segment())
	if err != nil {
		return Pong{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Discover() (Discover, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != discover")
	}
	p, err := s.Struct.Ptr(0)
	return Discover{Struct: p.Struct()}, err
}

func (s Z) HasDiscover() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetDiscover(v Discover) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDiscover sets the discover field to a newly
// allocated Discover struct, preferring placement in s's segment.
func (s Z) NewDiscover() (Discover, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewDiscover(s.Struct.Segment())
	if err != nil {
		return Discover{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Peers() (Peers, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != peers")
	}
	p, err := s.Struct.Ptr(0)
	return Peers{Struct: p.Struct()}, err
}

func (s Z) HasPeers() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetPeers(v Peers) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPeers sets the peers field to a newly
// allocated Peers struct, preferring placement in s's segment.
func (s Z) NewPeers() (Peers, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewPeers(s.Struct.Segment())
	if err != nil {
		return Peers{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Transaction() (Transaction, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != transaction")
	}
	p, err := s.Struct.Ptr(0)
	return Transaction{Struct: p.Struct()}, err
}

func (s Z) HasTransaction() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetTransaction(v Transaction) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTransaction sets the transaction field to a newly
// allocated Transaction struct, preferring placement in s's segment.
func (s Z) NewTransaction() (Transaction, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewTransaction(s.Struct.Segment())
	if err != nil {
		return Transaction{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Mempool() (Mempool, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != mempool")
	}
	p, err := s.Struct.Ptr(0)
	return Mempool{Struct: p.Struct()}, err
}

func (s Z) HasMempool() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetMempool(v Mempool) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMempool sets the mempool field to a newly
// allocated Mempool struct, preferring placement in s's segment.
func (s Z) NewMempool() (Mempool, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewMempool(s.Struct.Segment())
	if err != nil {
		return Mempool{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Inventory() (Inventory, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != inventory")
	}
	p, err := s.Struct.Ptr(0)
	return Inventory{Struct: p.Struct()}, err
}

func (s Z) HasInventory() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetInventory(v Inventory) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInventory sets the inventory field to a newly
// allocated Inventory struct, preferring placement in s's segment.
func (s Z) NewInventory() (Inventory, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewInventory(s.Struct.Segment())
	if err != nil {
		return Inventory{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Request() (Request, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != request")
	}
	p, err := s.Struct.Ptr(0)
	return Request{Struct: p.Struct()}, err
}

func (s Z) HasRequest() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetRequest(v Request) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated Request struct, preferring placement in s's segment.
func (s Z) NewRequest() (Request, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewRequest(s.Struct.Segment())
	if err != nil {
		return Request{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Z_List is a list of Z.
type Z_List struct{ capnp.List }

// NewZ creates a new list of Z.
func NewZ_List(s *capnp.Segment, sz int32) (Z_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Z_List{l}, err
}

func (s Z_List) At(i int) Z { return Z{s.List.Struct(i)} }

func (s Z_List) Set(i int, v Z) error { return s.List.SetStruct(i, v.Struct) }

func (s Z_List) String() string {
	str, _ := text.MarshalList(0xb46d352733d41eba, s.List)
	return str
}

// Z_Promise is a wrapper for a Z promised by a client call.
type Z_Promise struct{ *capnp.Pipeline }

func (p Z_Promise) Struct() (Z, error) {
	s, err := p.Pipeline.Struct()
	return Z{s}, err
}

func (p Z_Promise) Ping() Ping_Promise {
	return Ping_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Pong() Pong_Promise {
	return Pong_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Discover() Discover_Promise {
	return Discover_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Peers() Peers_Promise {
	return Peers_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Transaction() Transaction_Promise {
	return Transaction_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Mempool() Mempool_Promise {
	return Mempool_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Inventory() Inventory_Promise {
	return Inventory_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Request() Request_Promise {
	return Request_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_904d4f3f728c7f04 = "x\xda4\xcb=h\x13q\x1c\xc6\xf1\xe7\xf9\xff/\xb9" +
	"\x88\x9e\xbd\xa3\xe7\"h\xddD\xc1\xb7\x96\x88/C\x8b" +
	" \x14A\xea/\xe8\xa2\x83\xc4\xf4\x90\x80\xb9;/\xb1" +
	"\xa8KG\xb58\x08\x82\x8bC\x1d\xc4I\x07A\x1d\x04" +
	"7E\x04\x07\x8b\x0a\xad\x14Eh C\x85\x88\x1dl" +
	"\x8d\xfe$%Y?\xcf\xf3\xdd\x7f\x8fc\xe6@n\xb6" +
	"\x00\xc8d.\xaf/\xb7\x7f\x1a\xd9Y\xac=\x83\x14H" +
	"u\xa6og\xa3\x13'\xef\xe08\xdd\x020XtJ" +
	"\x83\x87\x1d\x17\x18):o\x09\xc5\x06\xbd\xbe\xb7RN" +
	"\xe3\xf4\x08x\xf6\x14);\xac\xb3I\xd5!\x10\xcc\xed" +
	"\x06\xe4\xbd\xa5\xcc\x1bz\xfc\xa7!\xbb\xfa\xb9\xab\x1f," +
	"e\xd1\xd03\x7f5\xa4\x01\x82\x85\x13\x80\xcc[\xca\x92" +
	"\xa1g;\x1a\xd2\x02\xc1\xf7a@\x16-\xa5e\xe89" +
	"\x7f4\xa4\x03\x04\xcd\x0b\x80,YJ\xdb\xd0\xcb\xadi" +
	"\xc8\x1c\x10\xfc8\x06H\xcbRV\x0c\xbd\xfc\xaa\x86\xcc" +
	"\x03\xc1\xcf\x12 mK\xe9\x18z\xeeo\x0d\xe9\x02\xc1" +
	"j\xf7\xbbbY\xa2\xe1@Z\x8d/\xd2\xd7\xe6\xd0\x97" +
	"__\xc7_?\x04H\x1f\x1cH\x93u\xd6=\x0f&" +
	"t\xf8y\xb3\xc7:Y\xadW\x92\xa9(\x03@_\xaf" +
	"\xbext\xb05\xb6<\xd3[\x87\xd2(\xca\xea\xf4u" +
	"k\xe9\xdc\x9bmk3\xaf\xfaU#+\xc7\xf5r\xa5" +
	"\x01\xb7\x9a\xc4\xf4\xf5\xbc\xdd5\x97_\x98]\xee\xed\xd3" +
	"\xb5\xa8\x96&\xc9%\xfa\xba\xe5\xf1\xbe3O6\x1fj" +
	"\xf7\xcbj<\x15\xc5\x8d$\x03\xaf\xd1\xd7\x9b\xdf6\xde" +
	"\x7fzz\xfcV\xbf\xcb\xa2\xcbW\xa2z\x83\xbe\xde=" +
	"\xfan\xf4F\xf0\xb1\xd5[\xfe\x07\x00\x00\xff\xff\xfc\xad" +
	"\x87\xe6"

func init() {
	schemas.Register(schema_904d4f3f728c7f04,
		0xb46d352733d41eba)
}
