// Code generated by capnpc-go. DO NOT EDIT.

package codec

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Z struct{ capnp.Struct }
type Z_Which uint16

const (
	Z_Which_ping     Z_Which = 0
	Z_Which_pong     Z_Which = 1
	Z_Which_discover Z_Which = 2
	Z_Which_peers    Z_Which = 3
	Z_Which_text     Z_Which = 4
	Z_Which_data     Z_Which = 5
)

func (w Z_Which) String() string {
	const s = "pingpongdiscoverpeerstextdata"
	switch w {
	case Z_Which_ping:
		return s[0:4]
	case Z_Which_pong:
		return s[4:8]
	case Z_Which_discover:
		return s[8:16]
	case Z_Which_peers:
		return s[16:21]
	case Z_Which_text:
		return s[21:25]
	case Z_Which_data:
		return s[25:29]

	}
	return "Z_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Z_TypeID is the unique identifier for the type Z.
const Z_TypeID = 0xb46d352733d41eba

func NewZ(s *capnp.Segment) (Z, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Z{st}, err
}

func NewRootZ(s *capnp.Segment) (Z, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Z{st}, err
}

func ReadRootZ(msg *capnp.Message) (Z, error) {
	root, err := msg.RootPtr()
	return Z{root.Struct()}, err
}

func (s Z) String() string {
	str, _ := text.Marshal(0xb46d352733d41eba, s.Struct)
	return str
}

func (s Z) Which() Z_Which {
	return Z_Which(s.Struct.Uint16(0))
}
func (s Z) Ping() (Ping, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != ping")
	}
	p, err := s.Struct.Ptr(0)
	return Ping{Struct: p.Struct()}, err
}

func (s Z) HasPing() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetPing(v Ping) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPing sets the ping field to a newly
// allocated Ping struct, preferring placement in s's segment.
func (s Z) NewPing() (Ping, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewPing(s.Struct.Segment())
	if err != nil {
		return Ping{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Pong() (Pong, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != pong")
	}
	p, err := s.Struct.Ptr(0)
	return Pong{Struct: p.Struct()}, err
}

func (s Z) HasPong() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetPong(v Pong) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPong sets the pong field to a newly
// allocated Pong struct, preferring placement in s's segment.
func (s Z) NewPong() (Pong, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewPong(s.Struct.Segment())
	if err != nil {
		return Pong{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Discover() (Discover, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != discover")
	}
	p, err := s.Struct.Ptr(0)
	return Discover{Struct: p.Struct()}, err
}

func (s Z) HasDiscover() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetDiscover(v Discover) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDiscover sets the discover field to a newly
// allocated Discover struct, preferring placement in s's segment.
func (s Z) NewDiscover() (Discover, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewDiscover(s.Struct.Segment())
	if err != nil {
		return Discover{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Peers() (Peers, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != peers")
	}
	p, err := s.Struct.Ptr(0)
	return Peers{Struct: p.Struct()}, err
}

func (s Z) HasPeers() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetPeers(v Peers) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPeers sets the peers field to a newly
// allocated Peers struct, preferring placement in s's segment.
func (s Z) NewPeers() (Peers, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewPeers(s.Struct.Segment())
	if err != nil {
		return Peers{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Z) Text() (string, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != text")
	}
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Z) HasText() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) TextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Z) SetText(v string) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetText(0, v)
}

func (s Z) Data() ([]byte, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != data")
	}
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Z) HasData() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Z) SetData(v []byte) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetData(0, v)
}

// Z_List is a list of Z.
type Z_List struct{ capnp.List }

// NewZ creates a new list of Z.
func NewZ_List(s *capnp.Segment, sz int32) (Z_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Z_List{l}, err
}

func (s Z_List) At(i int) Z { return Z{s.List.Struct(i)} }

func (s Z_List) Set(i int, v Z) error { return s.List.SetStruct(i, v.Struct) }

func (s Z_List) String() string {
	str, _ := text.MarshalList(0xb46d352733d41eba, s.List)
	return str
}

// Z_Promise is a wrapper for a Z promised by a client call.
type Z_Promise struct{ *capnp.Pipeline }

func (p Z_Promise) Struct() (Z, error) {
	s, err := p.Pipeline.Struct()
	return Z{s}, err
}

func (p Z_Promise) Ping() Ping_Promise {
	return Ping_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Pong() Pong_Promise {
	return Pong_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Discover() Discover_Promise {
	return Discover_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Z_Promise) Peers() Peers_Promise {
	return Peers_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_904d4f3f728c7f04 = "x\xda4\xcc\xbfK\x1ba\x1c\xc7\xf1\xcf\xe7y\xee\x92" +
	"\x0e9rGn(\x856S(-\xb4\xd0\xa4\xed\xd0" +
	"\xa5Y\x0aE\x90\xf8d\x11t\x0a\xc9!\x19L\x8e$" +
	"Hp\xc9\xe4\x12\x1c\x1c\x1ct\x10\"\x04Q\x88\xa0\x10" +
	"E\x047\xfd\x0f\x9c\x1c\xdc\x02\x0eN\xba\xc5\x1f_9" +
	"\x89\xeb\xeb\x0do\xf7.\xaf~\xd8\x1d\x0b0?\xed\x98" +
	"\x9c~\xba\xcc}\xfe\xb58\x84yG\x8a\xd5Ym\xfc" +
	"-L\xaf\xe1\x1f\xe31 \x95Q\xc5\xd4\x17\x15\x07r" +
	"\x195K\xac\xc8\xf2\xf7r)\xac\x85\x7f\xc0\xb9\x19\xd2" +
	"\xbc\xd7VB\xc4\"\xe0m~\x05\xcc\xba\xa6\xe9):" +
	"|\x16\x9f\x91nE\xba\xa1i\xfa\x8a\x8ez\x12\x9f\x0a" +
	"\xf0\xb6\xa7\x00\xd3\xd34\x03EG?\x8aO\x0dx{" +
	"Y\xc0\xf45\xcd\x81\xa2c=\x88O\x0b\xf0\xf6\xa3\xc3" +
	"\xae\xa6\x19*:\xf6X|\xda\x80w\x18\xe9@\xd3\x9c" +
	"(&\xc3jm\x81\xae\x8c\xd2W\xf7\xd7\xff\xcf\xfb\x00" +
	"\xe9\x82\xc9\xb0\xfe\xca\xf2\xadW\x90\xec\xd1h\xc2R\xa9" +
	"6\xcb\xf5\xa5\xa0\x01\x80\xae\xb4\x8fw~\xdf\xe4o\xbb" +
	"\x93\x9a\x0e\x83\xa0\xd1\xa4+\x1f\x8a\xf3\x17\x1f\xc7\xdd\xb3" +
	"\xb7Y+h\xb7\x98\x80b\x02LVJ\xad\x12\x1d(" +
	":\xe0K\x00\x00\x00\xff\xff\x08\xedU\xbe"

func init() {
	schemas.Register(schema_904d4f3f728c7f04,
		0xb46d352733d41eba)
}
