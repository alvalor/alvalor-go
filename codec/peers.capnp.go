// Code generated by capnpc-go. DO NOT EDIT.

package codec

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Peers struct{ capnp.Struct }

// Peers_TypeID is the unique identifier for the type Peers.
const Peers_TypeID = 0xbd8afa1dc55b521a

func NewPeers(s *capnp.Segment) (Peers, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Peers{st}, err
}

func NewRootPeers(s *capnp.Segment) (Peers, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Peers{st}, err
}

func ReadRootPeers(msg *capnp.Message) (Peers, error) {
	root, err := msg.RootPtr()
	return Peers{root.Struct()}, err
}

func (s Peers) String() string {
	str, _ := text.Marshal(0xbd8afa1dc55b521a, s.Struct)
	return str
}

func (s Peers) Addresses() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Peers) HasAddresses() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Peers) SetAddresses(v capnp.TextList) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewAddresses sets the addresses field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Peers) NewAddresses(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// Peers_List is a list of Peers.
type Peers_List struct{ capnp.List }

// NewPeers creates a new list of Peers.
func NewPeers_List(s *capnp.Segment, sz int32) (Peers_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Peers_List{l}, err
}

func (s Peers_List) At(i int) Peers { return Peers{s.List.Struct(i)} }

func (s Peers_List) Set(i int, v Peers) error { return s.List.SetStruct(i, v.Struct) }

func (s Peers_List) String() string {
	str, _ := text.MarshalList(0xbd8afa1dc55b521a, s.List)
	return str
}

// Peers_Promise is a wrapper for a Peers promised by a client call.
type Peers_Promise struct{ *capnp.Pipeline }

func (p Peers_Promise) Struct() (Peers, error) {
	s, err := p.Pipeline.Struct()
	return Peers{s}, err
}

const schema_b8fb51aaf7fc2d2f = "x\xda\x12x\xe7\xc0d\xc8\xda\xcf\xc6\xc0\x10\xe8\xc3\xca" +
	"\xf6_*(\xfa\xa8\xec\xaf\xae\xbd\x0c\x82<\x8c\xff\xf5" +
	"u\xff|_\x15\xf8{\x07\x03+#;\x03\x83\xb0." +
	"\xf3$aSf\x10\xcb\x90\xd9\x9e\xe1\xf8\xff\x82\xd4\xd4" +
	"\xa2b\xbd\xe4D\xc6\x82\xbc\x02\xab\x80\xd4\xd4\"\xc6\xe2" +
	"\x00F\xc6@\x16f\x16\x06\x06\x16F\x06\x06A\xde " +
	"\x06\x86@\x1ef\xc6@\x0d&\xc6\xff\x89))E\xa9" +
	"\xc5\xc5\xa9\x0c\x8c\xc5\x8c|\x0c\x8c\x01\xcc\x8c\x8c<\x0c" +
	"L & \x00\x00\xff\xffW\x82\x1f\x12"

func init() {
	schemas.Register(schema_b8fb51aaf7fc2d2f,
		0xbd8afa1dc55b521a)
}
