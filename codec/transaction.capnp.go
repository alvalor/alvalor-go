// Code generated by capnpc-go. DO NOT EDIT.

package codec

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Transaction struct{ capnp.Struct }

// Transaction_TypeID is the unique identifier for the type Transaction.
const Transaction_TypeID = 0xec9fd906d129035f

func NewTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Transaction{st}, err
}

func NewRootTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Transaction{st}, err
}

func ReadRootTransaction(msg *capnp.Message) (Transaction, error) {
	root, err := msg.RootPtr()
	return Transaction{root.Struct()}, err
}

func (s Transaction) String() string {
	str, _ := text.Marshal(0xec9fd906d129035f, s.Struct)
	return str
}

func (s Transaction) Transfers() (Transfer_List, error) {
	p, err := s.Struct.Ptr(0)
	return Transfer_List{List: p.List()}, err
}

func (s Transaction) HasTransfers() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Transaction) SetTransfers(v Transfer_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTransfers sets the transfers field to a newly
// allocated Transfer_List, preferring placement in s's segment.
func (s Transaction) NewTransfers(n int32) (Transfer_List, error) {
	l, err := NewTransfer_List(s.Struct.Segment(), n)
	if err != nil {
		return Transfer_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Transaction) Fees() (Fee_List, error) {
	p, err := s.Struct.Ptr(1)
	return Fee_List{List: p.List()}, err
}

func (s Transaction) HasFees() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Transaction) SetFees(v Fee_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewFees sets the fees field to a newly
// allocated Fee_List, preferring placement in s's segment.
func (s Transaction) NewFees(n int32) (Fee_List, error) {
	l, err := NewFee_List(s.Struct.Segment(), n)
	if err != nil {
		return Fee_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Transaction) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Transaction) HasData() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Transaction) SetData(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s Transaction) Signatures() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.DataList{List: p.List()}, err
}

func (s Transaction) HasSignatures() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s Transaction) SetSignatures(v capnp.DataList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s Transaction) NewSignatures(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// Transaction_List is a list of Transaction.
type Transaction_List struct{ capnp.List }

// NewTransaction creates a new list of Transaction.
func NewTransaction_List(s *capnp.Segment, sz int32) (Transaction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return Transaction_List{l}, err
}

func (s Transaction_List) At(i int) Transaction { return Transaction{s.List.Struct(i)} }

func (s Transaction_List) Set(i int, v Transaction) error { return s.List.SetStruct(i, v.Struct) }

func (s Transaction_List) String() string {
	str, _ := text.MarshalList(0xec9fd906d129035f, s.List)
	return str
}

// Transaction_Promise is a wrapper for a Transaction promised by a client call.
type Transaction_Promise struct{ *capnp.Pipeline }

func (p Transaction_Promise) Struct() (Transaction, error) {
	s, err := p.Pipeline.Struct()
	return Transaction{s}, err
}

const schema_b5f3d18a6c743283 = "x\xdaL\xcd1K\xf3P\x14\xc6\xf1\xe7\xb9'\xed\xcb" +
	";\xb4\xf6\xda\xac\xa1\xb3\x0e\xa2\x8e\x9d\x1cu\xb2W\x9c" +
	"\\\xf4\x12S\x09\x94\xb4$\xd7\xa1\xa0\x93\x8b\x0a\x85\x0a" +
	":89\x07\\\x1d\xfd\x08\x0e\x1d\xfd\x04\"8\xe9\xee" +
	"\x95TD\xb7\xc3\xef\xcf\xe1Y=\xe5\x86Z\xabm\xff" +
	"\x07\xcc\xa0V\xf7\xfb\xb24\xab?\xdf\xbdA/\xd2\x9f" +
	"\xad\xbb\xc1\xe5\xec\xe3\x01\xb5\xe0\x1f\xd0\x9e\x04\xef\xed\xdb" +
	"\xf9u\x13\xbc\xc0\xa3\xe3]n\xb3\xc2\xc6N\xa5\xc3l" +
	"%\xb6\xa3l\xd4\xdd\x9dS'v\xe90\xeb\x91\xa6%" +
	"\x01\x10\x10\xd0v\x070\x07Bs\xa2\xa8\xc9\x90\x15\x8e" +
	"\x97\x01\xe3\x84f\xaa\xa8\x95\x0a\xa9\x00=\xa9\xf0\\h" +
	"\xae\x15\xb5HH\x01\xf4\xd5\x1e`\xa6Bs\xaf\xf8=" +
	"\xdcOr\xb0`\x13\xec\x09\xd9\xf2et\xb1\xd9\xddz" +
	"\xfc\x04X\xe1B?I\xfe\xd4q\xeb5*\xa3\xf2\xe9" +
	"\xa7\x1eZg\xd9\x80b\x03\xf4Ez\x94Yw\x9cC" +
	"~_\xaa\xd6\x04\xbf\x02\x00\x00\xff\xff^\x84B\xbd"

func init() {
	schemas.Register(schema_b5f3d18a6c743283,
		0xec9fd906d129035f)
}
